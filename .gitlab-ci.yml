stages:
    - build-image
    - test
    - build-deploy-image
    - deploy

variables:
    IMAGE_REPO_PREFIX: ????
    CI_IMAGE_NAME: ci
    CI_IMAGE: $AWS_ECR/$IMAGE_REPO_PREFIX/$CI_IMAGE_NAME

    CACHE_FALLBACK_KEY: ????
    GIT_STRATEGY: none

.base:
    tags:
        - docker
        - ibuildings
    cache: []
    rules:
        - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_TAG == null
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null

.build:
    extends: .base
    stage: build-image
    services:
        - name: docker:20-dind
          command: ["--tls=false"]
    cache: []
    script:
        - aws_ecr_login && aws_ecr_create $IMAGE_REPO
        - docker pull $CI_IMAGE:main || true
        - docker pull $IMAGE:main || true
        - docker pull $IMAGE:$CI_COMMIT_REF_SLUG || true
        - docker compose -f docker-compose.yml -f $COMPOSE_FILE build $SERVICE
        - docker tag $IMAGE:$CI_COMMIT_SHORT_SHA $IMAGE:$CI_COMMIT_REF_SLUG
        - docker push --all-tags $IMAGE
    variables:
        KUBERNETES_MEMORY_REQUEST: 4Gi
        KUBERNETES_MEMORY_LIMIT: 4Gi
        KUBERNETES_SERVICE_MEMORY_REQUEST: 2Gi
        KUBERNETES_SERVICE_MEMORY_LIMIT: 2Gi
        DOCKER_BUILDKIT: 1
        COMPOSE_DOCKER_CLI_BUILD: 1
        APP_SERVICE: app
        WWW_SERVICE: caddy
        IMAGE_REPO: $IMAGE_REPO_PREFIX/$IMAGE_NAME
        IMAGE: $AWS_ECR/$IMAGE_REPO
        GIT_STRATEGY: fetch

Build CI APP Image:
    extends: .build
    variables:
        COMPOSE_FILE: docker-compose.ci.yml
        SERVICE: $APP_SERVICE
        IMAGE_NAME: $CI_IMAGE_NAME

PHP Tests:
    extends: .base
    stage: test
    image: $CI_IMAGE:$CI_COMMIT_SHORT_SHA
    services:
        - mariadb:10.6
        - redis:6.2-alpine
    script:
        - cd /srv/app
        - rm -f .env.local.php
        - composer install --prefer-dist --no-progress --no-interaction
        - bin/console --env=test --no-interaction doctrine:migrations:migrate
        - bin/console --env=test --no-interaction doctrine:fixtures:load
        - composer check
    variables:
        MARIADB_ALLOW_EMPTY_ROOT_PASSWORD: 1
        MARIADB_DATABASE: app_test
        MARIADB_USER: symfony
        MARIADB_PASSWORD: ChangeMe
        DATABASE_URL: mysql://${MARIADB_USER}:${MARIADB_PASSWORD}@mariadb:3306/app?serverVersion=mariadb-10.6.7&charset=utf8mb4
        APP_ENV: dev
        APP_DEBUG: 0

JS Tests:
    extends: .base
    stage: test
    image: $CI_IMAGE:$CI_COMMIT_SHORT_SHA
    script:
        - cd /srv/app
        - yarn audit

.build-for-deploy:
    extends: .build
    stage: build-deploy-image
    rules:
        -   if: $CI_PIPELINE_SOURCE == "schedule"
            when: never
        -   if: $CI_COMMIT_TAG
        -   if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

Build Deploy WWW Image:
    extends: .build-for-deploy
    variables:
        COMPOSE_FILE: docker-compose.yml
        SERVICE: $WWW_SERVICE
        IMAGE_NAME: www

Build Deploy APP Image:
    extends: .build-for-deploy
    variables:
        COMPOSE_FILE: docker-compose.yml
        SERVICE: $APP_SERVICE
        IMAGE_NAME: app

.deploy:
    extends: .base
    stage: deploy
    rules:
        - if: $CI_COMMIT_TAG
          when: manual
    before_script:
        - cd tools/deployment/overlays/$ENV
        - kustomize edit set image ????/www=$AWS_ECR/$IMAGE_REPO_PREFIX/www:$CI_COMMIT_SHORT_SHA ????/app=$AWS_ECR/$IMAGE_REPO_PREFIX/app:$CI_COMMIT_SHORT_SHA
        - kustomize build > deployment.yaml
    script:
        - eval DB_DSN=\$${ENV}_DB_DSN
        - eval APP_SECRET=\$${ENV}_APP_SECRET
        - kubectl create secret generic -n ibuildings ????-env-$ENV
            --save-config
            --dry-run=client
            --from-literal=db-dsn=$DB_DSN
            --from-literal=app-secret=$APP_SECRET
            -o yaml | kubectl apply -f -
        - kubectl apply -f deployment.yaml
        - kubectl rollout status -n ibuildings deploy/????-$ENV_NAME-app
    variables:
        GIT_STRATEGY: fetch
        ENV_NAME: $ENV

deploy:test:
    extends: .deploy
    rules:
        -   if: $CI_PIPELINE_SOURCE == "schedule"
            when: never
        -   if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
    environment:
        name: Test
        url: https://????.ib-services.nl
    variables:
        ENV: test

deploy:production:
    extends: .deploy
    environment:
        name: Production
        url: https://????.ib-services.nl
    variables:
        ENV: production
